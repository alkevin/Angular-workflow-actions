name: Test Angular Projects
on: push

jobs:
  setup:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [ 10.16.3 ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: Setup for ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Restore npm cache
      uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Setup Node.js
      if: steps.npm-cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

  test:
    runs-on: ubuntu-latest
    needs: setup
    name: Test Angular App
    steps:
    - uses: actions/checkout@master
    - name: Install dependencies
      run: npm ci --prefer-dist --no-progress --no-suggest --no-scripts
    - name: Build & test
      run: npm run build:ci
    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage-report
        path: coverage

  sonar:
    runs-on: ubuntu-latest
    needs: test
    name: SonarCloud Trigger
    steps:
    - uses: actions/checkout@master
    - name: Download code coverage results
      uses: actions/download-artifact@v1
      with:
        name: code-coverage-report
        path: coverage
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      with:
        projectBaseDir: .
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  heroku:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@master
    - name: Login to DockerHub Registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
    - name: push to heroku
      env :
        HEROKU_REGISTRY_URL: registry.heroku.com
        HEROKU_TOKEN : ${{ secrets.HEROKU_API_KEY }}
      run : |
        echo $HEROKU_TOKEN | docker login --username=_ $HEROKU_REGISTRY_URL --password-stdin
        export HEROKU_API_KEY=$HEROKU_TOKEN
        heroku container:login
        heroku container:push web --app ${{ secrets.HEROKU_APP_NAME }}
        heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        heroku ps:scale web=1 --app ${{ secrets.HEROKU_APP_NAME }}
